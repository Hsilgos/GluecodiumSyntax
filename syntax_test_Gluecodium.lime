// SYNTAX TEST "Gluecodium.sublime-syntax"

   package com.example
// ^^^^^^^ keyword.other.package.lime
//         ^^^^^^^^^^^ meta.path.lime entity.name.namespace.lime

    import com.my.example
//  ^^^^^^ keyword.control.import.lime
//         ^^^^^^^^^^^^^^ meta.path.lime support.type.package.lime

    # Some one-line Comment
//  ^ comment.line.lime punctuation.definition.comment.lime
//    ^^^^^^^^^^^^^^^^^^^^^^ comment.line.lime

    // Line of documentation
//  ^^ comment.line.double-slash.lime punctuation.definition.comment.lime
//     ^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime

    // Line of documentation with [example.Reference] inside and one more [Reference]
//  ^^ comment.line.double-slash.lime punctuation.definition.comment.lime
//     ^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime
//                                ^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime markup.underline.link.lime
//                                                    ^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime
//                                                                        ^^^^^^^^^^^ comment.line.double-slash.lime markup.underline.link.lime

    // Overloaded [method(Type)], overloaded [method(Type1?, List<Type2>?)] and text
    // Overloaded [fqp.method()], overloaded [fqp.method(List<Type2>, Type1)] and text

    // Doc with range: [12,20]
//  ^^ comment.line.double-slash.lime punctuation.definition.comment.lime
//     ^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime

    // Documentation {@Java for java only} and the rest
//  ^^ comment.line.double-slash.lime punctuation.definition.comment.lime
//     ^^^^^^^^^^^^^ comment.line.double-slash.lime
//                   ^ meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                    ^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                          ^^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                       ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime
//                                         ^^^^^^^^^^^^^ comment.line.double-slash.lime

    // Documentation {@Java @Swift for java and Swift only} and the rest
//  ^^ comment.line.double-slash.lime punctuation.definition.comment.lime
//     ^^^^^^^^^^^^^ comment.line.double-slash.lime
//                   ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                    ^^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                                 ^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                                        ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime
//                                                          ^^^^^^^^^^^^^ comment.line.double-slash.lime


    // Documentation {@Java with [example.Reference] for Java} and the rest
//                   ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                    ^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                          ^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                               ^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.underline.link.lime
//                                                   ^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                                           ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime

    // Documentation {@Java with [example.Reference] and another [Reference] for Java} and the rest
//                   ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                    ^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                          ^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                               ^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.underline.link.lime
//                                                   ^^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                                               ^^^^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.underline.link.lime
//                                                                           ^^^^^^^^ comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                                                                   ^ comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime

    /*Multiline documentation with {@Java specific text and [example.Reference]}*/
//  ^^ comment.block.lime punctuation.definition.comment.lime
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.lime
//                                 ^ comment.block.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                                  ^^^^^^ comment.block.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                                        ^^^^^^^^^^^^^^^^^^ comment.block.lime meta.inline-tag.lime markup.raw.lime
//                                                          ^^^^^^^^^^^^^^^^^^^ comment.block.lime meta.inline-tag.lime markup.underline.link.lime
//                                                                             ^ comment.block.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime

    /*Multiline documentation with @param[arg1] and @return*/
//  ^^ comment.block.lime punctuation.definition.comment.lime
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                                 ^^^^^^ comment.block.lime keyword.other.documentation.code-or-literal.lime
//                                       ^^^^^^ comment.block.lime markup.underline.link.lime
//                                              ^^^ comment.block.lime
//                                                  ^^^^^^^ comment.block.lime keyword.other.documentation.code-or-literal.lime
//                                                         ^^ comment.block.lime punctuation.definition.comment.lime
    

    interface Foo {}
//  ^^^^^^^^^ keyword.declaration.interface.lime
//            ^^^ entity.name.interface.lime
//                ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                 ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
    interface Foo : Bar {}
//  ^^^^^^^^^ keyword.declaration.interface.lime
//            ^^^ entity.name.interface.lime
//                ^ keyword.operator.declaration.lime
//                  ^^^ entity.name.class.lime
//                      ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                       ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
    class Foo {}
//  ^^^^^ keyword.declaration.class.lime
//        ^^^ entity.name.class.lime
//            ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//             ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
    types Foo {} 
//  ^^^^^ keyword.declaration.types.lime
//        ^^^ entity.name.types.lime
//            ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//             ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
    class Foo {class Bar {}}
//  ^^^^^ keyword.declaration.class.lime
//        ^^^ entity.name.class.lime
//            ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//             ^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
//                   ^^^ meta.class.body.lime meta.block.lime entity.name.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                        ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
    class Foo {interface Bar {}}
//  ^^^^^ keyword.declaration.class.lime
//        ^^^ entity.name.class.lime
//            ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//             ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.interface.lime
//                       ^^^ meta.class.body.lime meta.block.lime entity.name.interface.lime
//                           ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                            ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

    enum EnumName {
//  ^^^^ keyword.declaration.enum.lime
//       ^^^^^^^^ meta.enum.lime entity.name.enum.lime
//                ^ meta.enum.lime meta.enum.body.lime meta.block.lime punctuation.section.block.begin.lime
        ENUM_VALUE1,
//      ^^^^^^^^^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                 ^ meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
        ENUM_VALUE2,
//      ^^^^^^^^^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                 ^ meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
        ENUM_VALUE1 = 123,
//      ^^^^^^^^^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                  ^ meta.enum.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^ meta.enum.body.lime meta.block.lime constant.numeric.integer.decimal.lime
//                       ^ meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
        ENUM_VALUE4 = 456
//      ^^^^^^^^^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                  ^ meta.enum.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^ meta.enum.body.lime meta.block.lime constant.numeric.integer.decimal.lime
    }
//  ^ meta.enum.body.lime meta.block.lime punctuation.section.block.end.lime

    enum Foo {
//  ^^^^ keyword.declaration.enum.lime
//       ^^^ meta.enum.lime entity.name.enum.lime
//           ^ meta.enum.lime meta.enum.body.lime meta.block.lime punctuation.section.block.begin.lime
        @Cpp(Name = "BEGIN")
//      ^^^^^^^^^^^^^^^^^^^^ meta.annotation.lime
        ONE,
//      ^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//         ^ meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
        @Cpp(Name = "MOVE")
//      ^^^^^^^^^^^^^^^^^^^ meta.annotation.lime
        TWO,
//      ^^^ meta.enum.body.lime meta.block.lime constant.other.enum.lime
//         ^ meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
    }
//  ^ meta.enum.body.lime meta.block.lime punctuation.section.block.end.lime

    struct Foo {
//  ^^^^^^ keyword.declaration.struct.lime
//         ^^^ entity.name.struct.lime
//             ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
        var: Type
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        var: Type?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: full.path.Type
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        var: full.path.Type?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        const var: Type
//      ^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//            ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        internal var: Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                    ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        internal const var: Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                     ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//                        ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        var: List<Object>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: List<Object>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                       ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: List<Object?>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: List<Object?>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                        ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: List<my.package.Object>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                   ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                 ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: List<my.package.Object>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                   ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                 ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                  ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: List<my.package.Object?>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                   ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                 ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                  ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: List<my.package.Object?>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                   ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                 ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                  ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: Map< Key, Value >
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: Map< Key, Value >?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: Map< Key, Value?>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: Map< Key, Value? >?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: Map< Int, my.package.MyType>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: Map< Int, my.package.MyType>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                       ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: Map< Int, my.package.MyType?>
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        var: Map< Int, my.package.MyType?>?
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                     ^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                        ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        var: MyEnum = MyEnum.Value
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime punctuation.accessor.dot.lime
//                          ^ meta.class.body.lime meta.block.lime
//                           ^^^^^ meta.class.body.lime meta.block.lime constant.other.enum.lime
        var: MyEnum = full.path.MyEnum.Value
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^^ meta.class.body.lime meta.block.lime support.class.lime punctuation.accessor.dot.lime
//                        ^ meta.class.body.lime meta.block.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.class.lime punctuation.accessor.dot.lime
//                             ^ meta.class.body.lime meta.block.lime
//                              ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime punctuation.accessor.dot.lime
//                                    ^ meta.class.body.lime meta.block.lime
//                                     ^^^^^ meta.class.body.lime meta.block.lime constant.other.enum.lime
        var: Double = 0
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime
        var: Double = 100
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime
        var: Double = -100
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime keyword.operator
//                     ^^^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime
        var: Double = -10.3
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime keyword.operator
//                     ^^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime
//                       ^ meta.class.body.lime meta.block.lime constant.numeric.float.decimal.lime punctuation.separator.decimal.lime
//                        ^ meta.class.body.lime meta.block.lime constant.numeric.float.decimal.lime
        var: Double = 1.41e-2
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^^^^^ meta.class.body.lime meta.block.lime constant.numeric.float.decimal.lime
        var: Double = -1.41e-2
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime keyword.operator
//                     ^ meta.class.body.lime meta.block.lime constant.numeric.integer.decimal.lime
//                      ^ meta.class.body.lime meta.block.lime constant.numeric.float.decimal.lime punctuation.separator.decimal.lime
//                       ^^^^^ meta.class.body.lime meta.block.lime constant.numeric.float.decimal.lime
        var: Double = NaN
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^ meta.class.body.lime meta.block.lime constant.language.lime
        var: Double = Infinity
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^^^^^^^^ meta.class.body.lime meta.block.lime constant.language.lime
        var: Double = -Infinity
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime constant.language.lime keyword.operator
//                     ^^^^^^^^ meta.class.body.lime meta.block.lime constant.language.lime
        var: String = "Some Text"
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                     ^^^^^^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                              ^ meta.class.body.lime meta.block.lime string.quoted.double.lime punctuation.definition.string.end.lime
        var: String = "\tText \r with \n escape \" symbols \\ end. "
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                     ^^ meta.class.body.lime meta.block.lime string.quoted.double.lime constant.character.escape.lime
//                       ^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                            ^^ meta.class.body.lime meta.block.lime string.quoted.double.lime constant.character.escape.lime
//                               ^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                                    ^^ meta.class.body.lime meta.block.lime string.quoted.double.lime constant.character.escape.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                                              ^^ meta.class.body.lime meta.block.lime string.quoted.double.lime constant.character.escape.lime
//                                                 ^^^^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                                                         ^^ meta.class.body.lime meta.block.lime string.quoted.double.lime constant.character.escape.lime
//                                                            ^^^^ meta.class.body.lime meta.block.lime string.quoted.double.lime
//                                                                 ^ meta.class.body.lime meta.block.lime string.quoted.double.lime punctuation.definition.string.end.lime
        var: Double? = null
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                     ^^^^ meta.class.body.lime meta.block.lime constant.language.lime
        var: MyType = {1, 10.0, -1, NaN, -Infinity, 1.14e-1, "text"}
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                     ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.integer.decimal.lime
//                      ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                        ^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.float.decimal.lime
//                            ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                              ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.integer.decimal.lime keyword.operator
//                               ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.integer.decimal.lime
//                                ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                  ^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.language.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.language.lime keyword.operator
//                                        ^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.language.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                                  ^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.float.decimal.lime
//                                                         ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                                           ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                                                            ^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime string.quoted.double.lime
//                                                                ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime string.quoted.double.lime punctuation.definition.string.end.lime
//                                                                 ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
        var: MyType = {{1}, {NaN, null}, {}}
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                     ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                      ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime constant.numeric.integer.decimal.lime
//                       ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
//                        ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                          ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                           ^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime constant.language.lime
//                              ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                ^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime constant.language.lime
//                                    ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
        var: full.path.Type = {{1}, {NaN, null}, {}}
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                            ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
        var: full.path.Type? = {{1}, {NaN, null}, {}}
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                           ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                             ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
        var: MyType = {flagOption = true, uintOption = 42, floatOption=1.34e-10, typeParam = {}, listParam = [1, 2]}
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                    ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                     ^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime variable.parameter.lime
//                                ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime keyword.operator.assignment.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.language.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                        ^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime variable.parameter.lime
//                                                   ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime keyword.operator.assignment.lime
//                                                     ^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.integer.decimal.lime
//                                                       ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                                         ^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime variable.parameter.lime
//                                                                    ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime keyword.operator.assignment.lime
//                                                                     ^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime constant.numeric.float.decimal.lime
//                                                                             ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                                                               ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime variable.parameter.lime
//                                                                                         ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime keyword.operator.assignment.lime
//                                                                                           ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.begin.lime
//                                                                                            ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
//                                                                                             ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.separator.comma.lime
//                                                                                               ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime variable.parameter.lime
//                                                                                                         ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime keyword.operator.assignment.lime
//                                                                                                           ^^^^^^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime
//                                                                                                                 ^ meta.class.body.lime meta.block.lime meta.braces.type-initialization.lime punctuation.section.braces.end.lime
        var: List<Int> = [1, 2]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                     ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                       ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
//                        ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime constant.numeric.integer.decimal.lime
//                         ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.separator.comma.lime
//                           ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime constant.numeric.integer.decimal.lime
//                            ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.end.lime
        var: List<Int>? = [1, 2]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                        ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<Int?> = [1, 2]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                        ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<Int?>? = [1, 2]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                       ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                         ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<full.path.Type> = [{1}, {2}]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<full.path.Type>? = [{1}, {2}]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<full.path.Type?> = [{1}, {2}]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<full.path.Type?>? = [{1}, {2}]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                    ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                  ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                                    ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<String> = ["1", "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                        ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                          ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
//                           ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                            ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime
//                             ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.end.lime
//                              ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.separator.comma.lime
//                                ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.end.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.end.lime
        var: List<String?> = ["1", "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                           ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime

        var: List<String>? = ["1", "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                       ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                           ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: List<String?>? = ["1", "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                       ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                        ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                            ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: Map<Int, String> = [1: "1", 2: "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//               ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                    ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                            ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                              ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
//                               ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime constant.numeric.integer.decimal.lime
//                                ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime keyword.operator.assignment.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime
//                                    ^
//                                     ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.separator.comma.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime constant.numeric.integer.decimal.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime keyword.operator.assignment.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime string.quoted.double.lime punctuation.definition.string.end.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.end.lime
        var: Map<Int, String>? = [1: "1", 2: "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//               ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                    ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                             ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                               ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: Map<Int, String?> = [1: "1", 2: "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//               ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                    ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                             ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                               ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
        var: Map<Int, String?>? = [1: "1", 2: "text"]
//      ^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//           ^^^ meta.class.body.lime meta.block.lime support.class.lime
//              ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//               ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                  ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                    ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                                ^ meta.class.body.lime meta.block.lime meta.brackets.array-initialization.lime punctuation.section.brackets.begin.lime
    }
//  ^ meta.class.body.lime meta.block.lime punctuation.section.braces.end.lime

    @Equitable
//  ^ meta.annotation.lime punctuation.definition.annotation.lime
//   ^^^^^^^^^ meta.annotation.lime variable.annotation.lime
    class Foo {
//  ^^^^^ keyword.declaration.class.lime
//        ^^^ entity.name.class.lime
//            ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
        @Equitable
//      ^ meta.class.body.lime meta.block.lime meta.annotation.lime punctuation.definition.annotation.lime
//       ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime variable.annotation.lime
        interface InnerInterface {
//      ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.interface.lime
//                ^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.interface.lime
//                               ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
        }
//      ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        

        property prop: Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        property prop: Type?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        property prop: full.path.Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        property prop: Full.Path.Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime

        property prop: full.path.Type?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        static property prop: Type
//      ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//             ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                      ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        static property prop: Type?
//      ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//             ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                      ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        static property prop: full.path.Type
//      ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//             ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                      ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        static property prop: full.path.Type?
//      ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//             ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                      ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        internal static property prop: Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        internal static property prop: Type?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        internal static property prop: full.path.Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        internal static property prop: full.path.Type?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        property prop: Map< Key, Value >
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        property prop: Map< Key, Value >?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        property prop: Map< Key, Value? >
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        property prop: Map< Key, Value? >?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                       ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime

        property prop: Map< Key, full.path.Value >
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                         ^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        property prop: Map< Key, full.path.Value >?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                         ^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                                ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        property prop: Map< Key, full.path.Value? >
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                         ^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        property prop: Map< Key, full.path.Value? >?
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                         ^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                                 ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        property prop: Type {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                           ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                               ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                  ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: Type? {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                           ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                            ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: full.path.Type {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                     ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                         ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: full.path.Type? {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                          ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                              ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                               ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                      ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                          ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                             ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: Map< Key, Value > {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                       ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                        ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                            ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                               ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: Map< Key, Value >? {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                        ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                         ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                             ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                                ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: Map< Key, Value? > {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                        ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                         ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                             ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                                ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        property prop: Map< Key, Value? >? {get set}
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                               ^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                       ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                         ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
//                                          ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                              ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
//                                                 ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
        // Documentation {@Java java} test
//      ^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//         ^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
//                       ^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                        ^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                              ^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                  ^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime
//                                    ^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
        property prop: Type
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime

        internal property prop: Type {
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                        ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            // Documentation {@Java java} test
//          ^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
//                           ^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                            ^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                      ^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime
//                                        ^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
            get
//          ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
        }
//      ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        internal property prop: Type {
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                        ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            internal get
//          ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                   ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
            internal set
//          ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                   ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
        }
//      ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        property prop: Type {
//      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                     ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            public get
//          ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                 ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
        }
//      ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        static property prop: Map<Int, String?>? {
//      ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//             ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                      ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                          ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                            ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                                ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                               ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            get
//          ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
            set
//          ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
        }
//      ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        internal static property prop: Map<Int, String?>? {
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                      ^^^^^^^^ meta.class.body.lime meta.block.lime entity.name.function.lime
//                               ^^^^ meta.class.body.lime meta.block.lime variable.parameter.property.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                     ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                        ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                        ^ meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            internal get
//          ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//                   ^^^ meta.class.body.lime meta.block.lime keyword.control.lime
        }
//      ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime

        enum EnnerEnum {
//      ^^^^ meta.class.body.lime meta.block.lime keyword.declaration.enum.lime
//           ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.enum.lime entity.name.enum.lime
//                     ^ meta.class.body.lime meta.block.lime meta.enum.lime meta.enum.body.lime meta.block.lime punctuation.section.block.begin.lime
            VALUE1,
//          ^^^^^^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                ^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime punctuation.separator.comma.lime
            VALUE2=3
//          ^^^^^^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime constant.other.enum.lime
//                ^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime keyword.operator.assignment.lime
//                 ^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime constant.numeric.integer.decimal.lime
        }
//      ^ meta.class.body.lime meta.block.lime meta.enum.body.lime meta.block.lime punctuation.section.block.end.lime

        constructor create()
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        constructor create() throws Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                  ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        constructor create() throws full.path.Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                           ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                            ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        constructor create(var: Type)
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        constructor create(var1: Type, var2: List<Integer?>?)
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                                                ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        constructor create(var: Type?)
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        constructor create(var: full.path.Type)
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                                   ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                                        ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        constructor create(var: Type) throws Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                    ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                           ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        constructor create(var1: Type, var2: List<Integer?>?) throws Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                               ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                                                ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                                            ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                                   ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        constructor create(var: Type?) throws Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                            ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        constructor create(var: full.path.Type) throws Exception
//      ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                  ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                         ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                                   ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                                        ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                     ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        internal constructor create()
//      ^^^^^^^^ meta.class.body.lime meta.block.lime storage.modifier.lime
//               ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//                           ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime

        fun foo()
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        fun foo() throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                       ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo() throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                           ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                            ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                 ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): ReturnType
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): ReturnType throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                   ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): ReturnType throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                   ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                        ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                            ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                             ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): ReturnType?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): ReturnType? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                    ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): ReturnType? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                         ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                             ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                              ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): full.path.ReturnType
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): full.path.ReturnType throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): full.path.ReturnType throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                       ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): full.path.ReturnType?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): full.path.ReturnType? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                              ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): full.path.ReturnType? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                      ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                          ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                           ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                              ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                   ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                        ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): List<Integer>
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        fun foo(): List<Integer> throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                               ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                      ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): List<Integer> throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                               ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): List<Integer>?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): List<Integer>? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                       ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): List<Integer>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                      ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                           ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                            ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                 ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,String>
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        fun foo(): Map<Integer,String> throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                            ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,String> throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                            ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                 ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                     ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                      ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,String?>
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime

        fun foo(): Map<Integer,String?> throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,String?> throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                       ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,String>?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): Map<Integer,String>? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,String>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                       ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,String?>?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): Map<Integer,String?>? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                              ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,String?>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                              ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                  ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                   ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                       ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                        ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type>
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        fun foo(): Map<Integer,full.path.Type> throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                    ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type> throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                         ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                             ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                              ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type>?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): Map<Integer,full.path.Type>? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                     ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                               ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type?>
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        fun foo(): Map<Integer,full.path.Type?> throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                     ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type?> throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                              ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                               ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type?>?
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        fun foo(): Map<Integer,full.path.Type?>? throws Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                               ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                      ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        fun foo(): Map<Integer,full.path.Type?>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//               ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                 ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                             ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                               ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                      ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                          ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                           ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                                ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
        fun foo(
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
            // Documentation for variable1
//          ^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime
            var1: Type,
//          ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
            // Documentation for variable1 with [data.Reference]
//          ^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime
//                                              ^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime markup.underline.link.lime
            var2: Type?,
//          ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
            // Documentation for variable1 with {@Swift only annotation}
//          ^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime
//                                              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.begin.lime
//                                               ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
//                                                      ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
//                                                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime punctuation.section.inline-tag.end.lime
            var3: List<Integer>
//          ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                     ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
            ):
//          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
            // Documentation for return value 
//          ^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
            Map<Integer, String>? throws
//          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//              ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                     ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                       ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
            // Documentation for exception
//          ^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime punctuation.definition.comment.lime
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
            Exception
//          ^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime

        // Some Description
        // @param[variable1] variable description
    //     ^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime keyword.other.documentation.code-or-literal.lime
    //           ^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime markup.underline.link.lime
        // @return Some value
    //     ^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime keyword.other.documentation.code-or-literal.lime
    //             ^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
        // @throws Some exception
    //     ^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime keyword.other.documentation.code-or-literal.lime
    //             ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
        fun foo(var: Type): Map<Integer, String>? throws full.path.Exception
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                   ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                        ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                          ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                              ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                       ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                              ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                           ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                            ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                                ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                                 ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime

        fun foo(var0: Type,
//      ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//          ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
                var1: Type?
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
                var2: full.path.Type,
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                         ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
                var3: full.path.Type?
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                         ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.type.package.lime
//                             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.accessor.dot.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
                var4: Map<Integer, Type>,
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
                var5: Map<Integer, Type>?
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                      ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
                var6: Map<Integer, full.path.Type>,
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
                var7: Map<Integer, full.path.Type>?,
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
                var8: Map<Integer, full.path.Type?>,
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
                var9: Map<Integer, full.path.Type?>?):
//              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime variable.parameter.property.lime
//                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                    ^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.begin.lime
//                        ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                                 ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                      ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                           ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
//                                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.definition.generic.end.lime
//                                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
                Map<Integer, full.path.Type?>? throws full.path.Exception
//              ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                 ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                  ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                         ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                           ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                               ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                    ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                         ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                          ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                             ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.throws.lime
//                                                    ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                        ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                         ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                                             ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                                              ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime

        // @get Gets something
    //     ^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime keyword.other.documentation.code-or-literal.lime
        // @set Sets something
    //     ^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime keyword.other.documentation.code-or-literal.lime
        property variable_name: PropertyType {get set}

        // escaped \@param \{elements\} \\
    //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.double-slash.lime

        // escaped {@Swift \@Dart text \} more text} common text
    //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime

        @Dart(Default)
    //  ^ meta.class.body.lime meta.block.lime meta.annotation.lime punctuation.definition.annotation.lime
    //   ^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime variable.annotation.lime
    //        ^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime variable.parameter.lime
        constructor create()
    //  ^^^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
    //              ^^^^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
    //                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
    //                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime

        @Cpp(ExternalType = "external_type", ExternalName = "external_name")
    //       ^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime variable.parameter.lime
    //                    ^ keyword.operator.assignment.lime
    //                       ^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime string.quoted.double.lime
    //                                     ^ meta.class.body.lime meta.block.lime meta.annotation.lime punctuation.separator.comma.lime
    //                                       ^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime variable.parameter.lime
    //                                                    ^ keyword.operator.assignment.lime
    //                                                       ^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.annotation.lime string.quoted.double.lime
        fun foo(): ReturnType
    //  ^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
    //      ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
    //         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
    //          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
    //           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
    //             ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime

        lambda foo = () -> Void
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.class.lime

        lambda foo = (Blob?) -> Void
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                           ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                              ^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda foo = () -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda foo = () -> ReturnType?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        lambda foo = () -> full.path.ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                              ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                  ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                   ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda foo = () -> full.path.ReturnType?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                              ^^^^ meta.class.body.lime meta.block.lime support.type.package.lime
//                                  ^ meta.class.body.lime meta.block.lime punctuation.accessor.dot.lime
//                                   ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        lambda foo = () -> List<Integer>
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                              ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime

        lambda foo = () -> List<Integer>?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                             ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                              ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                     ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                      ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime

        lambda foo = () -> Map<Integer,String>
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        lambda foo = () -> Map<Integer,String?>
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        lambda foo = () -> Map<Integer,String>?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                            ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        lambda foo = () -> Map<Integer,String?>?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                             ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        lambda foo = () -> Map<Integer,full.path.Type>
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        lambda foo = () -> Map<Integer,full.path.Type>?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                                   ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                                    ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
        lambda foo = () -> Map<Integer,full.path.Type?>
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
        lambda foo = () -> Map<Integer,full.path.Type?>?
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                      ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                         ^^^ meta.class.body.lime meta.block.lime support.class.lime
//                            ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.begin.lime
//                             ^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
//                                    ^ meta.class.body.lime meta.block.lime punctuation.separator.comma.lime
//                                     ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                         ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                          ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
//                                              ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
//                                               ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
//                                                   ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                                    ^ meta.class.body.lime meta.block.lime punctuation.definition.generic.end.lime
//                                                     ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime

        lambda bar = (Type) -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                          ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                             ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda bar = (@Java("name1") Type?) -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.definition.annotation.lime
//                     ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime variable.annotation.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.section.parens.begin.lime
//                          ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime string.quoted.double.lime punctuation.definition.string.begin.lime
//                           ^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime string.quoted.double.lime
//                                ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime string.quoted.double.lime punctuation.definition.string.end.lime
//                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.section.parens.end.lime
//                                   ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                          ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                             ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda bar = (full.path.Type) -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                         ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                             ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                              ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
//                                  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                    ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                       ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda bar = (Type?) -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                         ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                           ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                              ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
        lambda bar = (Type, Type?) -> ReturnType
//      ^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.function.lime
//             ^^^ meta.class.body.lime meta.block.lime meta.method.identifier.lime entity.name.function.lime
//                 ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
//                   ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                    ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                        ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.separator.comma.lime
//                          ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
//                              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime keyword.operator.declaration.lime
//                               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
//                                 ^^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//                                    ^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime

        lambda bar = (
            // Documentation for variable1
        //  ^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime punctuation.definition.comment.lime
        //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime
            @Java(param1="name1") Type,
        //  ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.definition.annotation.lime
        //   ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime variable.annotation.lime
        //       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.section.parens.begin.lime
        //        ^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime variable.parameter.lime
        //              ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime keyword.operator.assignment.lime
        //               ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime string.quoted.double.lime punctuation.definition.string.begin.lime
        //                ^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime string.quoted.double.lime
        //                      ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.annotation.lime punctuation.section.parens.end.lime
            // Documentation for variable1 with {@Swift only annotation}
        //  ^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime punctuation.definition.comment.lime
        //                                       ^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime keyword.other.documentation.code-or-literal.lime
        //                                              ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime comment.line.double-slash.lime meta.inline-tag.lime markup.raw.lime
            @Java("name2") full.path.Type?) ->

        // Documentation for return value
    //  ^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime punctuation.definition.comment.lime
    //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime comment.line.double-slash.lime
        ReturnType?

        exception MyException(ExceptionEnum)
    //  ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
    //            ^^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
    //                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
    //                        ^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime support.class.lime
    //                                     ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
        exception MyException(full.path.ExceptionEnum)
    //  ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
    //            ^^^^^^^^^^^ meta.class.body.lime meta.block.lime support.class.lime
    //                       ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
    //                        ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
    //                            ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
    //                             ^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
    //                                 ^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
    //                                  ^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime

        typealias Foo = Bar
    //  ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
    //            ^^^ meta.class.body.lime meta.block.lime support.class.lime
    //                ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
    //                  ^^^ meta.class.body.lime meta.block.lime support.class.lime
        typealias Foo = full.path.Bar
    //  ^^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
    //            ^^^ meta.class.body.lime meta.block.lime support.class.lime
    //                ^ meta.class.body.lime meta.block.lime keyword.operator.assignment.lime
    //                  ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
    //                      ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
    //                       ^^^^ meta.class.body.lime meta.block.lime meta.path.lime support.type.package.lime
    //                           ^ meta.class.body.lime meta.block.lime meta.path.lime punctuation.accessor.dot.lime
    //                            ^^^ meta.class.body.lime meta.block.lime meta.path.lime support.class.lime
    }

    class Foo {
        interface Bar {

        }

        fun bar(): Type
    }

    class Foo {
        var:Enum = Enum.VALUE = Enum.VALUE
    //                        ^^^^^^^^^^^^ meta.class.body.lime meta.block.lime
        var:Type
    }

    class Foo {
        var:Type:

        var:Type
    }

    exception MyException(ExceptionEnum)
//  ^^^^^^^^^ keyword.declaration.class.lime
//            ^^^^^^^^^^^ support.class.lime
//                       ^ meta.method.parameters.lime meta.parens.lime punctuation.section.parens.begin.lime
//                        ^^^^^^^^^^^^^ meta.method.parameters.lime meta.parens.lime support.class.lime
//                                     ^ meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime
    exception MyException(full.path.ExceptionEnum)
//                        ^^^^ meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                            ^ meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                             ^^^^ meta.method.parameters.lime meta.parens.lime meta.path.lime support.type.package.lime
//                                 ^ meta.method.parameters.lime meta.parens.lime meta.path.lime punctuation.accessor.dot.lime
//                                  ^^^^^^^^^^^^^ meta.method.parameters.lime meta.parens.lime meta.path.lime support.class.lime
//                                               ^ meta.method.parameters.lime meta.parens.lime punctuation.section.parens.end.lime

    class Bar : Foo {
//            ^ keyword.operator.declaration.lime
//              ^^^ entity.name.class.lime
    }

    typealias Foo = Bar
//  ^^^^^^^^^ keyword.declaration.class.lime
//            ^^^ support.class.lime
//                ^ keyword.operator.assignment.lime
//                  ^^^ support.class.lime
    typealias Foo = full.path.Bar
//  ^^^^^^^^^ keyword.declaration.class.lime
//            ^^^ support.class.lime
//                ^ keyword.operator.assignment.lime
//                  ^^^^ meta.path.lime support.type.package.lime
//                      ^ meta.path.lime punctuation.accessor.dot.lime
//                       ^^^^ meta.path.lime support.type.package.lime
//                           ^ meta.path.lime punctuation.accessor.dot.lime
//                            ^^^ meta.path.lime support.class.lime

    const variable: Int = 42
//  ^^^^^ storage.modifier.lime
//        ^^^^^^^^ variable.parameter.lime
//                ^ keyword.operator.declaration.lime
//                  ^^^ support.class.lime
//                      ^ keyword.operator.assignment.lime
//                        ^^ constant.numeric.integer.decimal.lime


    struct StructWithExternals {
//  ^^^^^^ keyword.declaration.struct.lime
//         ^^^^^^^^^^^^^^^^^^^ entity.name.struct.lime
        external {
//      ^^^^^^^^ meta.class.body.lime meta.block.lime keyword.declaration.class.lime
//               ^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime punctuation.section.block.begin.lime
            java name "com.example.Type"
//          ^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                    ^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime
            java converter "com.example.TypeConverter"
//          ^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime

            dart converterImport "../type_converter.dart"
//          ^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                               ^^^^^^^^^^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime
            dart converter "TypeConverter"
//          ^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                         ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime
            swift framework "UIKit"
//          ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                          ^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime
            swift converter "TypeConverter"
//          ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime keyword.other.external-java-name.lime
//                          ^^^^^^^^^^^^^^^ meta.class.body.lime meta.block.lime meta.class.body.lime meta.block.lime string.quoted.double.lime
        }

        field: Type
//      ^^^^^ meta.class.body.lime meta.block.lime variable.parameter.lime
//           ^ meta.class.body.lime meta.block.lime keyword.operator.declaration.lime
//             ^^^^ meta.class.body.lime meta.block.lime support.class.lime
    }
//  ^ meta.class.body.lime meta.block.lime punctuation.section.block.end.lime
